

// ---------------------------------- NOTES -------------------------------------

// ---------Beer-Lambert law-----------------------------
// vec3 background_color {xr, xg, xb};
// float sigma_a = 0.1; // absorption coefficient
// float distance = 10;
// float T = exp(-distance * sigma_a);
// vec3 background_color_through_volume = T * background_color;

// ---------------------- Alternative intersect box function -----------------------------------------
// https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection.html
//fn intersect_box(origin: vec3<f32>, rayDir: vec3<f32>) -> vec2<f32>
//{
//    var tmin: f32; 
//    var tmax: f32; 
//    var tymin: f32; 
//    var tymax: f32; 
//    var tzmin: f32; 
//    var tzmax: f32;
//
//    var box_min: vec3<f32> = vec3<f32>(0.0,0.0,0.0);
//    var box_max: vec3<f32> = vec3<f32>(1.0,1.0,1.0);
//
//    var bounds: array<vec3<f32>,2>;
//    bounds[0] = box_min;
//    bounds[1] = box_max; 
//
//    var inv_dir: vec3<f32>  = 1.0 / rayDir;
//    var sign: vec3<i32>;
//
//    if (inv_dir.x < 0.0) {sign.x = 1;} else {sign.x = 0;}
//    if (inv_dir.y < 0.0) {sign.y = 1;} else {sign.y = 0;}
//    if (inv_dir.z < 0.0) {sign.z = 1;} else {sign.z = 0;}
//
//    tmin = (bounds[sign.x].x - origin.x) * inv_dir.x;
//    tmax = (bounds[1-sign.x].x - origin.x) * inv_dir.x;
//    tymin = (bounds[sign.y].y - origin.y) * inv_dir.y;
//    tymax = (bounds[1-sign.x].y - origin.y) * inv_dir.y;
//
//    //if ((tmin > tymax) || (tymin > tmax)) {discard;}
//
//    if (tymin > tmin) {tmin = tymin;}
//    if (tymax < tmax) {tmax = tymax;}
//
//    tzmin = (bounds[sign.z].z - origin.z) * inv_dir.z;
//    tzmax = (bounds[1-sign.z].z - origin.z) * inv_dir.z;
//       
//    //if ((tmin > tzmax) || (tzmin > tmax)) {discard;}
//    if (tzmin > tmin) {tmin = tzmin;}
//    if (tzmax < tmax) {tmax = tzmax;}
//        
//    return vec2<f32>(tmin,tmax);
//}

//@fragment
//fn fs_main(fragmentInput: FragmentInput) -> @location(0) vec4<f32>
//{
//    // Step 1: Normalize the view ray
//	var rayDir: vec3<f32> = normalize(fragmentInput.ray_direction);
//
//	// Step 2: Intersect the ray with the volume bounds to find the interval
//	// along the ray overlapped by the volume.
//	var t_hit: vec2<f32> = intersect_box(fragmentInput.eyePosition, rayDir);
//    var t_enter = t_hit.x;
//    var t_exit = t_hit.y;
//
//    // So we don't sample voxels behind the eye
//    t_enter = max(t_enter, 0.0);
//
//    // Step 3: Compute the step size to march through the volume grid
//	var dt_vec: vec3<f32> = 1.0 / (vec3<f32>(256.0, 256.0, 256.0) * abs(rayDir));
//	var dt: f32 = min(dt_vec.x, min(dt_vec.y, dt_vec.z));
//
//    // Step 4: Starting from the entry point, march the ray through the volume
//	// and sample it
//	var p: vec3<f32> = fragmentInput.eyePosition + t_enter * rayDir;
//    var color: vec4<f32>;
//    for (var t = t_enter; t < t_exit; t += dt) {
//		// Step 4.1: Sample the volume, and color it by the transfer function.
//		// Note that here we don't use the opacity from the transfer function,
//		// and just use the sample value as the opacity
//		var val: f32 = textureSampleLevel(volume, tex_sampler, p, 0.0).r;
//        // todo: possibly change tex_sampler
//		var val_color: vec4<f32> = vec4<f32>(textureSampleLevel(colormap, tex_sampler, vec2<f32>(val, 0.5),0.0).rgb, val);
//
//		// Step 4.2: Accumulate the color and opacity using the front-to-back
//		// compositing equation
//        color = vec4<f32>((1.0 - color.a) * val_color.a * val_color.rgb, (1.0 - color.a) * val_color.a);
//
//		// Optimization: break out of the loop when the color is near opaque
//		if (color.a >= 0.95) {
//			break;
//		}
//		p += rayDir * dt;
//	}
//
//    return color;
//    //return vec4<f32>(fragmentInput.eyePosition + rayDir * t_enter, 1.0);
//}