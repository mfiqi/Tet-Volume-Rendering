

    async makeVolume() {
        this.clearColor = linearToSRGB(0.1);

        this.sampler = this.device.createSampler({
            magFilter: "linear",
            minFilter: "linear",
        });

        this.volumeDims = [256,256,256];

        const longestAxis = Math.max(this.volumeDims[0], Math.max(this.volumeDims[1], this.volumeDims[2]));

        this.volumeScale = [
            this.volumeDims[0] / longestAxis,
            this.volumeDims[1] / longestAxis,
            this.volumeDims[2] / longestAxis
        ];

        this.colormapTexture = await uploadImage(this.device, "dist/color/rainbow.png");

        this.volumeData = await fetchVolume("dist/data/bonsai_256x256x256_uint8.raw");

        this.volumeTexture = await uploadVolume(this.device, this.volumeDims, this.volumeData);

        this.accumBuffers = [
            this.device.createTexture({
                size: [this.canvas.width, this.canvas.height, 1],
                format: "rgba32float",
                usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING
            }),
            this.device.createTexture({
                size: [this.canvas.width, this.canvas.height, 1],
                format: "rgba32float",
                usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING
            })
        ];
    
        this.accumBufferViews = [this.accumBuffers[0].createView(), this.accumBuffers[1].createView()];
    }
    